options {
    STATIC = false;
    TOKEN_FACTORY = "Token";
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    DEBUG_PARSER = true;

}

PARSER_BEGIN(LangParser)
import java.io.*;
import parser.First;
import parser.Instruction;
import parser.RecoverySet;
import parser.LanguageRules;
import java.util.List;
import java.util.ArrayList;

public class LangParser {
        int contParseError = 0;
        private String result = "";
        private boolean validLexical = true;
        private boolean validSyntax = true;
        static List<ErrorStruct> output = new ArrayList<ErrorStruct>();
        static List<String> commandList = new ArrayList<String>();
        static List<String> paramList = new ArrayList<String>();
        static LanguageRules languageRules = new LanguageRules();
        boolean eof;

        public String getResult(){
            return result;
        }

        public int getContParseError() {
            return contParseError;
        }

        public List<ErrorStruct> getOutput() {
             return output;
        }

        public void setOutput(List<ErrorStruct> newOutput) {
            output = newOutput;
        }

        public void setResult(String result) {
            this.result = result;
        }

        public boolean isValidLexical() {
            return validLexical;
        }

        public boolean isValidSyntax() {
            return validSyntax;
        }

        private void concatMessage(String msg) {
            this.result += msg;
        }

        private void concatError(Token t, String msg) {
            this.result += msg + " (" + t.image + ") located at [line:"+t.beginLine+"| column:"+t.beginColumn+"]\n";
        }

        public void eraseSemanticRules(){
            languageRules = new LanguageRules();
        }
        public List<Instruction> getSemanticInstructions(){
            return languageRules.getInstructionStack();
        }

        public List<String> getSemanticErrors(){
            return languageRules.getError();
        }

        public boolean isValidSemantic(){
            return !languageRules.haveError();
        }

        public static void main(String[] args) throws ParseException, IOException {
            try {
                LangParser parser = new LangParser(
                     new BufferedReader(new FileReader(args[0]))
                );
                parser.lexicalAnalyzer();
                System.err.println("Program successfully analyzed.");
            } catch (FileNotFoundException e) {
                System.err.println("Erro FileNotFoundException: " + e.getMessage());
            } catch (ParseException e) {
            }
        }

       public static void addRule(String rule, Token t) throws ParseException {
            switch(rule){
                case "#1":
                      languageRules.rule1(t);
                      break;
                case "#2":
                      languageRules.rule2();
                      break;
                case "#3":
                       languageRules.rule3(t);
                      break;
                case "#4":
                       languageRules.rule4(t);
                      break;
                case "#5":
                       languageRules.rule5();
                      break;
                case "#6":
                       languageRules.rule6();
                      break;
                case "#7":
                       languageRules.rule7(t);
                      break;
                case "#8":
                       languageRules.rule8();
                      break;
                case "#9":
                       languageRules.rule9(t);
                      break;
                case "#10":
                       languageRules.rule10(t);
                      break;
                case "#11":
                       languageRules.rule11();
                      break;
                case "#12":
                       languageRules.rule12(t);
                      break;
                case "#13":
                       languageRules.rule13();
                      break;
                case "#14":
                       languageRules.rule14();
                      break;
                case "#15":
                       languageRules.rule15();
                      break;
                case "#16":
                       languageRules.rule16();
                      break;
                case "#17":
                       languageRules.rule17();
                      break;
                case "#18":
                       languageRules.rule18();
                      break;
                case "#19":
                       languageRules.rule19();
                      break;
                case "#20":
                       languageRules.rule20();
                      break;
                case "#21":
                       languageRules.rule21();
                      break;
                case "#22":
                       languageRules.rule22();
                      break;
                case "#23":
                       languageRules.rule23();
                      break;
                case "#24":
                       languageRules.rule24(t);
                      break;
                case "#25":
                       languageRules.rule25();
                      break;
                case "#26":
                       languageRules.rule26(t);
                      break;
                case "#27":
                       languageRules.rule27(t);
                      break;
                case "#28":
                       languageRules.rule28(t);
                      break;
                case "#29":
                       languageRules.rule29();
                      break;
                case "#30":
                       languageRules.rule30();
                      break;
                case "#31":
                       languageRules.rule31();
                      break;
                case "#32":
                       languageRules.rule32();
                      break;
                case "#33":
                       languageRules.rule33();
                      break;
                case "#34":
                       languageRules.rule34();
                      break;
                case "#35":
                       languageRules.rule35();
                      break;
                case "#36":
                       languageRules.rule36();
                      break;
                case "#37":
                       languageRules.rule37();
                      break;
                case "#38":
                       languageRules.rule38();
                      break;
                case "#39":
                       languageRules.rule39();
                      break;
                case "#40":
                       languageRules.rule40();
                      break;
                case "#41":
                       languageRules.rule41();
                      break;
                case "#42":
                       languageRules.rule42();
                      break;
                case "#43":
                       languageRules.rule43();
                      break;
                case "#44":
                       languageRules.rule44();
                      break;
                case "#45":
                       languageRules.rule45();
                      break;
                case "#46":
                       languageRules.rule46();
                      break;
                case "#47":
                       languageRules.rule47();
                      break;
                case "#48":
                       languageRules.rule48();
                      break;
                case "#49":
                       languageRules.rule49();
                      break;
                case "#50":
                       languageRules.rule50();
                       break;
                case "#51":
                       languageRules.rule51();
                       break;
                case "#52":
                       languageRules.rule52();
                       break;
                case "#53":
                       languageRules.rule53();
                       break;
                case "#54":
                       languageRules.rule54();
                       break;

                default :
                      break;
                }
              }

        static public String im(int x){
                String s = tokenImage[x];
                int k = s.lastIndexOf("\"");
                try {
                    s = s.substring(1, k);
                }
                catch (StringIndexOutOfBoundsException e){}
                return s;
        }

        public void consumeUntil(RecoverySet g, ParseException e) throws  ParseException {
            Token tok;
            if (g == null){
                     throw e;
            }
            tok = getToken(1);
            while (!eof){
                if (g.contains(tok.kind)) {
                    break;
                }
                getNextToken();
                tok = getToken(1);
                if (tok.kind == EOF && !g.contains(EOF)){
                    eof = true;
                }
            }
            contParseError++;
       }
}
PARSER_END(LangParser)

<DEFAULT> SKIP : {
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

SKIP : {
    "/*" : multilinecomment
}

SKIP : {
    "//" : singlelinecomment
}

<multilinecomment> SKIP: {
      <"*/"> : DEFAULT
    | <~[]>
}

<singlelinecomment> SKIP: {
      <["\n","\r"]> : DEFAULT
    | <~[]>
}

<DEFAULT> TOKEN [IGNORE_CASE]: {
      <DO: "do">
    | <IS: "is">
    | <AS: "as">
    | <AND: "and">
    | <ALL: "all">
    | <THIS: "this">
    | <BODY: "body">
    | <TYPE: "type">
    | <REAL: "real">
    | <STRING: "string">
    | <LOGIC: "logic">
    | <ENUM: "enum">
    | <READ: "read">
    | <WRITE: "write">
    | <REPEAT: "repeat">
    | <VARIABLE: "variable">
    | <CONSTANT: "constant">
    | <RESULT: "result">
    | <INTEGER: "integer">
    | <AVALIATE: "avaliate">
    | <DESCRIPTION: "description">
    | <DECLARATION: "declaration">
    | <DESIGNATE: "designate">
}

<DEFAULT> TOKEN  [IGNORE_CASE]: {
      <TRUE: "true">
    | <UNTRUE: "untrue">
}

<DEFAULT> TOKEN : {
      <OR_LOGIC: "|">
    | <AND_LOGIC: "&">
    | <NEGATE_LOGIC : "!">
    | <PLUS: "+">
    | <SUBTRACTION: "-">
    | <MULTIPLY: "*">
    | <DIVISION: "/">
    | <INTEGER_DIVISION: "%">
    | <DIVISION_REMAINDER: "%%">
    | <POTENCE: "**">
    | <NOT_EQUAL: "!=">
    | <ATTRIBUTION: "=">
    | <EQUAL: "==">
    | <GREATER_THEN: ">>">
    | <LESS_THEN: "<<">
    | <LESS_EQUALS: "<<=">
    | <GREATER_EQUALS: ">>=">
}

<DEFAULT> TOKEN : {
      <OPEN_KEYS: "{">
    | <CLOSE_KEYS: "}">
    | <OPEN_BOX: "[">
    | <CLOSE_BOX: "]">
    | <OPEN_BRACKETS: "(">
    | <CLOSE_BRACKETS: ")">
}

<DEFAULT> TOKEN : {
      <SEMI_COLUMN: ",">
    | <DOT: ".">
}


<DEFAULT> TOKEN : {
    <IDENTIFIER : (<CAPITAL_LETTER>)+ (<SYMBOL>)?(
          (<LETTER>)*
        | <LETTER> <SYMBOL>
        | <DIGIT> <DIGIT> <LETTER>
        | <DIGIT> <DIGIT> <SYMBOL>
        | <DIGIT> <LETTER>
        | <DIGIT> <SYMBOL>
        | <DIGIT> <SYMBOL> <LETTER>
        | <DIGIT> <DIGIT> <SYMBOL> <LETTER>
        | <DIGIT> (<LETTER>)+ <SYMBOL>
        | <DIGIT> <DIGIT> (<LETTER>)+ <SYMBOL>
   )*>

    | <INVALID_IDENTIFIER:
           (<CAPITAL_LETTER>)+ (<LETTER>)* <SYMBOL> <SYMBOL> (<DIGIT> | <LETTER> | <SYMBOL>)*
        | (<CAPITAL_LETTER>)+ (<LETTER>)* (<SYMBOL>)? (<LETTER>)* <DIGIT> (<DIGIT>)? (<LETTER>)* <SYMBOL> <SYMBOL> (<SYMBOL>)*
        | (<CAPITAL_LETTER>)+ (<LETTER>)* (<SYMBOL>)? <DIGIT> <DIGIT> (<DIGIT>)+ (<LETTER>)*
        | (<CAPITAL_LETTER>)+ (<LETTER>)* (<SYMBOL>)? (<LETTER>)* (<SYMBOL>)? (<DIGIT>)+
        | (<CAPITAL_LETTER>)+ (<LETTER>)* <SYMBOL> <SYMBOL> (<SYMBOL>)* <DIGIT> <DIGIT> (<DIGIT>)+
        | (<CAPITAL_LETTER>)+ (<LETTER>)* <DIGIT> <DIGIT> (<DIGIT>)+ (<SYMBOL> | <LETTER>)*
        | (<CAPITAL_LETTER>)+ (<LETTER>)* <DIGIT> (<DIGIT>)? <SYMBOL> <SYMBOL> (<LETTER> | <SYMBOL>)*
        | (<CAPITAL_LETTER>)+ (<LETTER>)* <DIGIT> (<DIGIT>)? (<LETTER>)* <SYMBOL> <SYMBOL> (<SYMBOL>)*

    | (<SMALL_LETTER> )+ (
          <LETTER> (<LETTER> | <DIGIT> | <SYMBOL>)*
        | <SYMBOL> (<LETTER> | <DIGIT> | <SYMBOL>)*
        | <DIGIT> (<LETTER> | <DIGIT> | <SYMBOL>)*)

    | (<SYMBOL>)+ (
          <LETTER> (<LETTER> | <DIGIT> | <SYMBOL>)*
        | <DIGIT> (<LETTER> | <DIGIT> | <SYMBOL>)*)

    | (<DIGIT>)+ (
          <SYMBOL> (<SYMBOL> | <LETTER>)*
        | <LETTER> (<SYMBOL> | <LETTER>)*)>
}

TOKEN : {
      <LITERAL_CONSTANT: <DOUBLE_QUOTE_CONST> | <SINGLE_QUOTE_CONST> >
    | <DOUBLE_QUOTE_CONST: (<DOUBLE_QUOTE> (~["\""])* <DOUBLE_QUOTE>) >
    | <SINGLE_QUOTE_CONST: (<SINGLE_QUOTE> (~["\'"])* <SINGLE_QUOTE>) >
    | <ERROR_LITERAL_CONSTANT: <SINGLE_QUOTE> (~["\'"])* | <DOUBLE_QUOTE> (~["\""])*>
}

TOKEN : {
      <INTEGER_NUMERICAL_CONSTANT : <DIGIT> (<DIGIT>)? (<DIGIT>)?>
    | <REAL_NUMERICAL_CONSTANT : <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? "." <DIGIT> (<DIGIT>)? (<DIGIT>)?>

    | <INVALID_INTEGER_NUMERICAL_CONSTANT : <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+>
    | <INVALID_REAL_NUMERICAL_CONSTANT : (
         <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? ("." | ",")  <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+
       | <DIGIT> <DIGIT> <DIGIT> <DIGIT> <DIGIT> (<DIGIT>)+  ("." | ",") <DIGIT> (<DIGIT>)? (<DIGIT>)? )>
}

TOKEN : {
      <DIGIT: ["0"-"9"]>
    | <SYMBOL: ["_"]>
    | <MINUS: ("-"){1}>
    | <SINGLE_QUOTE: "'">
    | <DOUBLE_QUOTE: "\"">
    | <ASCII: (~[])>
    | <SMALL_LETTER : ["a"-"z"]>
    | <CAPITAL_LETTER : ["A"-"Z"]>
    | <LETTER: ["A"-"Z","a"-"z"]>
}

void declarations(RecoverySet r) : {} {
    try {
        (<DECLARATION> declarationOne(r))?
    } catch (ParseException e) {
        output.add(new ErrorStruct("Invalid enum/variable declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void declarationOne(RecoverySet r) : {} {
    try {
       <TYPE> <OPEN_BOX> enumDeclaration(r) <CLOSE_BOX> declarationTwo(r) | declarationConstantsAndVariables(r)
    } catch (ParseException e) {
        output.add(new ErrorStruct("Invalid enum/variable declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void declarationTwo(RecoverySet r) : {} {
    try {
       (<DECLARATION> declarationConstantsAndVariables(r))?
    } catch (ParseException e) {
        output.add(new ErrorStruct("Invalid variable declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void enumDeclaration(RecoverySet r) : { Token t;  } {
    try {
        <IDENTIFIER> addRule("#3", t) <IS> <OPEN_KEYS> innerEnumDeclaration() <CLOSE_KEYS> <DOT> enumDeclarationOne(r)
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid enum declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void enumDeclarationOne(RecoverySet r) : {} {
    try {
        (enumDeclaration(r))*
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid enum declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}


void innerEnumDeclaration() : { Token t; } {
    <IDENTIFIER> addRule("#4", t)  innerEnumDeclarationOne()
}

void innerEnumDeclarationOne() : {} {
     (<SEMI_COLUMN> innerEnumDeclaration())*
}


void index() : { Token t; } {
    (<OPEN_KEYS> <INTEGER_NUMERICAL_CONSTANT> addRule("#12", t) <CLOSE_KEYS>)?
}

void item() : { Token t; } {
      <IDENTIFIER> addRule("#24", t) index() addRule("#25", null)
    | <INTEGER_NUMERICAL_CONSTANT>  addRule("#26", t)
    | <REAL_NUMERICAL_CONSTANT>  addRule("#27", t)
    | <LITERAL_CONSTANT>  addRule("#28", t)
}

void identifierVariableList() : { Token t; } {
    try {
        <IDENTIFIER> addRule("#10", t) index() addRule("#11", null) identifierVariableOne()
    } catch (ParseException e){
        output.add(new ErrorStruct("Incorrect identifier variable", e));
        validSyntax = false;
    }
}

void identifierVariableOne() : {} {
    try {
        (<SEMI_COLUMN> identifierVariableList())*
    } catch (ParseException e){
        output.add(new ErrorStruct("Incorrect identifier variable", e));
        validSyntax = false;
    }
}

void identifierConstantList() : { Token t; } {
    try {
        <IDENTIFIER> addRule("#9", t) identifierConstantOne()
    } catch (ParseException e){
        output.add(new ErrorStruct("Incorrect identifier list", e));
        validSyntax = false;
    }
}

void identifierConstantOne() : {} {
    try {
       (<SEMI_COLUMN> identifierConstantList())*
    } catch (ParseException e){
        output.add(new ErrorStruct("Incorrect identifier list", e));
        validSyntax = false;
    }
}

void typeDeclaration() : {} {
    <INTEGER> addRule("#13", null) | <REAL> addRule("#14", null) | <STRING> addRule("#15", null) | <LOGIC> addRule("#16", null) | <IDENTIFIER> addRule("#17", null)
}

void variableDeclaration() : {} {
   identifierVariableList() <IS> typeDeclaration() addRule("#6", null) <DOT> variableDeclarationOne()
}

void variableDeclarationOne() : {} {
   (variableDeclaration())*
}

void constantDeclaration() : { Token t; } {
   identifierConstantList() <IS>  typeDeclaration() addRule("#6", null) <ATTRIBUTION>
   (<LITERAL_CONSTANT> | <INTEGER_NUMERICAL_CONSTANT> | <REAL_NUMERICAL_CONSTANT>) addRule("#7", t) <DOT> constantDeclarationOne()
}

void constantDeclarationOne() : { Token t; } {
   (constantDeclaration())*
}

void endConstant() : {} {
    (<AS> startConstant())?
}

void startVariable() : {} {
    <VARIABLE> addRule("#8", null) variableDeclaration()
}

void startConstant() : {} {
    <CONSTANT> addRule("#5", null) constantDeclaration()
}

void endVariable() : {} {
    (<AS> startVariable())?
}

void startDeclaration(RecoverySet r) : {} {
    try {
       (startConstant() endVariable()) | (startVariable() endConstant())
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid body declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void innerDeclaration(RecoverySet r) : {} {
    try {
        <AS> startDeclaration(r)
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid body declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void declarationConstantsAndVariables(RecoverySet r) : {} {
    try{
        <CONSTANT> <AND> <VARIABLE> <OPEN_BOX> innerDeclaration(r) <CLOSE_BOX>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid constant and variable declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void identifierConstantAndVariableList(): {} {
    item() addRule("#23", null) (identifierConstantAndVariableListOne())*
}

void identifierConstantAndVariableListOne(): {} {
    <SEMI_COLUMN> identifierConstantAndVariableList()
}

void constants(): {} {
    <LITERAL_CONSTANT> | numericConstant()
}

void numericConstant(): {} {
    <INTEGER_NUMERICAL_CONSTANT> | <REAL_NUMERICAL_CONSTANT>
}

void header(RecoverySet r):  { Token t; }
{
    try {
        <DO> <THIS> <IDENTIFIER> addRule("#1", t) <OPEN_BOX> <CLOSE_BOX>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid program header declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void expressionContinuation(RecoverySet g) : {} {
    ((<EQUAL> arithmeticOrLogicExpression(g)) addRule("#36", null) | (<NOT_EQUAL> arithmeticOrLogicExpression(g)) addRule("#37", null)
    | (<LESS_THEN> arithmeticOrLogicExpression(g)) addRule("#38", null) | (<GREATER_THEN> arithmeticOrLogicExpression(g)) addRule("#39", null)
    | (<LESS_EQUALS> arithmeticOrLogicExpression(g)) addRule("#40", null) | (<GREATER_EQUALS> arithmeticOrLogicExpression(g)) addRule("#41", null))?
}

void expression(RecoverySet g) : {} {
    try {
        arithmeticOrLogicExpression(g) expressionContinuation(g)
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid expression declaration", e));
        consumeUntil(g, e);
        validSyntax = false;
    }
}

void arithmeticOrLogicExpression(RecoverySet g) : {} {
    secondTerm(g) lesserPriorityOperators(g)
}

void firstTerm(RecoverySet g) : {} {
    element(g) topPriorityOperators(g)
}

void secondTerm(RecoverySet g) : {} {
    firstTerm(g) mediumPriorityOperators(g)
}

void element(RecoverySet g) : { Token t; } {
    (<IDENTIFIER> addRule("#24", t)  index() addRule("#51", null) )
    | <INTEGER_NUMERICAL_CONSTANT> addRule("#26", t) | <REAL_NUMERICAL_CONSTANT> addRule("#27", t) | <LITERAL_CONSTANT> addRule("#28", t)
    | <TRUE> addRule("#52", null) | <UNTRUE> addRule("#53", null) | (<OPEN_BRACKETS> expression(g) <CLOSE_BRACKETS> )
    | (<NEGATE_LOGIC> <OPEN_BRACKETS> expression(g) <CLOSE_BRACKETS> addRule("#54", null))
}

void topPriorityOperators(RecoverySet g) : {} {
    (<POTENCE> element(g) addRule("#50", null))*
}

void mediumPriorityOperators(RecoverySet g) : {} {
    ((<MULTIPLY> firstTerm(g)) addRule("#45", null) | (<DIVISION> firstTerm(g)) addRule("#46", null)
    | (<INTEGER_DIVISION> firstTerm(g)) addRule("#47", null) | (<DIVISION_REMAINDER> firstTerm(g)) addRule("#48", null)
    | (<AND_LOGIC> firstTerm(g)) addRule("#49", null))*
}

void lesserPriorityOperators(RecoverySet g) : {} {
    ((<PLUS> secondTerm(g)) addRule("#42", null) | (<MINUS> secondTerm(g)) addRule("#43", null) | (<OR_LOGIC> secondTerm(g)) addRule("#44", null))*
}

void repeat(RecoverySet r) : {
    RecoverySet g = new RecoverySet(OPEN_BOX);
    RecoverySet h = new RecoverySet(CLOSE_BOX);
} {
    try {
        <REPEAT> <THIS> addRule("#33", null) expression(g) addRule("#34", null) <OPEN_BOX>
            commandList(h)
        <CLOSE_BOX> addRule("#35", null) <DOT>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid repeat command declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void avaliateOne(RecoverySet r) : { RecoverySet g = new RecoverySet(CLOSE_BOX); } {
    try {
          <TRUE> <RESULT> addRule("#30", null) <OPEN_BOX> commandList(g) <CLOSE_BOX> continuationTrueResult() <DOT>
        | <UNTRUE> <RESULT> addRule("#31", null) <OPEN_BOX> commandList(g) <CLOSE_BOX> continuationUntrueResult()  <DOT>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid avaliate bory logic result declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void continuationTrueResult() : { RecoverySet g = new RecoverySet(CLOSE_BOX); } {
    try {
        (<UNTRUE> <RESULT> addRule("#32", null) <OPEN_BOX> commandList(g) <CLOSE_BOX>)?
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid avaliate bory logic result declaration", e));
        consumeUntil(g, e);
        validSyntax = false;
    }
}

void continuationUntrueResult() : { RecoverySet g = new RecoverySet(CLOSE_BOX); } {
    try {
        (<TRUE> <RESULT> addRule("#32", null) <OPEN_BOX> commandList(g) <CLOSE_BOX>)?
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid avaliate bory logic result declaration", e));
        consumeUntil(g, e);
        validSyntax = false;
    }
}

void avaliate(RecoverySet r) : { RecoverySet g = new RecoverySet(DOT); } {
    try {
        <AVALIATE> <THIS> expression(First.avaliate) avaliateOne(g) addRule("#29", null)
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid avaliate command declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void write(RecoverySet g) : {} {
    try {
        <WRITE> writeOne(g)
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid write command declaration", e));
        consumeUntil(g, e);
        validSyntax = false;
   }
}

void writeOne(RecoverySet g) : {} {
    try {
        <ALL> <THIS> addRule("#21", null) <OPEN_BOX> identifierConstantAndVariableList() <CLOSE_BOX> <DOT> |
         <THIS> addRule("#22", null) <OPEN_BOX> identifierConstantAndVariableList() <CLOSE_BOX> <DOT>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid write command declaration", e));
        consumeUntil(g, e);
        validSyntax = false;
   }
}

void designate(RecoverySet r) : { RecoverySet h = new RecoverySet(DOT); } {
    try {
        <DESIGNATE> <THIS> addRule("#18", null) identifierVariableList() <AS> expression(h) addRule("#19", null) <DOT>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid designate command declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void read(RecoverySet r) : {} {
    try {
        <READ> <THIS> addRule("#20", null) <OPEN_BOX> identifierVariableList() <CLOSE_BOX> <DOT>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid read command declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void commandList(RecoverySet r) : { RecoverySet g = First.commandList; } {
    try {
        (repeat(g) | avaliate(g) | write(g) | designate(g) | read(g))+
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid command list declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void body(RecoverySet r) : { RecoverySet g = new RecoverySet(OPEN_BOX); } {
    try {
        <BODY> <OPEN_BOX>
            commandList(g)
        <CLOSE_BOX>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid body declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void desc(RecoverySet r) : {} {
    try {
        (<DESCRIPTION> <LITERAL_CONSTANT>)?
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid description declaration", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void parser(RecoverySet r) : {
    RecoverySet h = new RecoverySet(BODY);
    RecoverySet g = new RecoverySet(DECLARATION);
    RecoverySet i = g.union(h);
    RecoverySet l = new RecoverySet(DESCRIPTION);
} {
    try {
        header(i)
        declarations(h)
        body(r.union(l))
        desc(r) addRule("#2", null)
    } catch (ParseException e){
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void syntaxAnalyzer() : {
    RecoverySet r = new RecoverySet(EOF);
} {
    try {
        [ parser(r) ] <EOF>
    } catch (ParseException e){
        output.add(new ErrorStruct("Invalid general form of the program", e));
        consumeUntil(r, e);
        validSyntax = false;
    }
}

void lexicalAnalyzer() : {} {
    (lexer())*
    <EOF>
}

void addRule(String rule, Token t) : {} {
try {
	{}
    } catch (ParseException e) {
        output.add(new ErrorStruct("", null));
    }
}

void lexer() : {
    Token t;
}{
    try {
        t = <DO> { System.out.println("DO: " + t.image); }
        | t = <IS> { System.out.println("IS: " + t.image); }
        | t = <AS> { System.out.println("AS: " + t.image); }
        | t = <AND> { System.out.println("AND: " + t.image); }
        | t = <ALL> { System.out.println("ALL: " + t.image); }
        | t = <THIS> { System.out.println("THIS: " + t.image); }
        | t = <BODY> { System.out.println("BODY: " + t.image); }
        | t = <TYPE> { System.out.println("TYPE: " + t.image); }
        | t = <REAL> { System.out.println("REAL: " + t.image); }
        | t = <STRING> { System.out.println("STRING: " + t.image); }
        | t = <LOGIC> { System.out.println("LOGIC: " + t.image); }
        | t = <ENUM> { System.out.println("ENUM: " + t.image); }
        | t = <READ> { System.out.println("READ: " + t.image); }
        | t = <WRITE> { System.out.println("WRITE: " + t.image); }
        | t = <REPEAT> { System.out.println("REPEAT: " + t.image); }
        | t = <VARIABLE> { System.out.println("VARIABLE: " + t.image); }
        | t = <CONSTANT> { System.out.println("CONSTANT: " + t.image); }
        | t = <RESULT> { System.out.println("RESULT: " + t.image); }
        | t = <INTEGER> { System.out.println("INTEGER: " + t.image); }
        | t = <AVALIATE> { System.out.println("AVALIATE: " + t.image); }
        | t = <DESCRIPTION> { System.out.println("DESCRIPTION: " + t.image); }
        | t = <DECLARATION> { System.out.println("DECLARATION: " + t.image); }
        | t = <DESIGNATE> { System.out.println("DESIGNATE: " + t.image); }
        | t = <TRUE> { System.out.println("TRUE: " + t.image); }
        | t = <UNTRUE> { System.out.println("UNTRUE: " + t.image); }
        | t = <NOT_EQUAL> { System.out.println("NOT_EQUAL: " + t.image); }
        | t = <ATTRIBUTION> { System.out.println("ATTRIBUTION: " + t.image); }
        | t = <EQUAL> { System.out.println("EQUAL: " + t.image); }
        | t = <GREATER_THEN> { System.out.println("GREATER_THEN: " + t.image); }
        | t = <LESS_THEN> { System.out.println("LESS_THEN: " + t.image); }
        | t = <LESS_EQUALS> { System.out.println("LESS_EQUALS: " + t.image); }
        | t = <GREATER_EQUALS> { System.out.println("GREATER_EQUALS: " + t.image); }
        | t = <OR_LOGIC> { System.out.println("OR_LOGIC: " + t.image); }
        | t = <AND_LOGIC> { System.out.println("AND_LOGIC: " + t.image); }
        | t = <NEGATE_LOGIC> { System.out.println("NEGATE_LOGIC: " + t.image); }
        | t = <PLUS> { System.out.println("PLUS: " + t.image); }
        | t = <SUBTRACTION> { System.out.println("SUBTRACTION: " + t.image); }
        | t = <MULTIPLY> { System.out.println("MULTIPLY: " + t.image); }
        | t = <DIVISION> { System.out.println("DIVISION: " + t.image); }
        | t = <INTEGER_DIVISION> { System.out.println("INTEGER_DIVISION: " + t.image); }
        | t = <DIVISION_REMAINDER> { System.out.println("DIVISION_REMAINDER: " + t.image); }
        | t = <POTENCE> { System.out.println("POTENCE: " + t.image); }
        | t = <SEMI_COLUMN> { System.out.println("SEMI_COLUMN: " + t.image); }
        | t = <DOT> { System.out.println("DOT: " + t.image); }
        | t = <OPEN_KEYS> { System.out.println("OPEN_KEYS: " + t.image); }
        | t = <CLOSE_KEYS> { System.out.println("CLOSE_KEYS: " + t.image); }
        | t = <OPEN_BOX> { System.out.println("OPEN_BOX: " + t.image); }
        | t = <CLOSE_BOX> { System.out.println("CLOSE_BOX: " + t.image); }
        | t = <OPEN_BRACKETS> { System.out.println("OPEN_BRACKETS: " + t.image); }
        | t = <CLOSE_BRACKETS> { System.out.println("CLOSE_BRACKETS: " + t.image); }
        | t = <IDENTIFIER> { System.out.println("IDENTIFIER: " + t.image); }
        | t = <INTEGER_NUMERICAL_CONSTANT> { System.out.println("INTEGER_NUMERICAL_CONSTANT: " + t.image); }
        | t = <REAL_NUMERICAL_CONSTANT> { System.out.println("REAL_NUMERICAL_CONSTANT: " + t.image); }
        | t = <LITERAL_CONSTANT> { System.out.println("LITERAL_CONSTANT: " + t.image); }
        | t = <ERROR_LITERAL_CONSTANT> { concatError(t, "Literal constant quote not ended"); validLexical = false; }
        | t = <INVALID_IDENTIFIER> { concatError(t, "Invalid Indentifier"); validLexical = false; }
        | t = <INVALID_INTEGER_NUMERICAL_CONSTANT> { concatError(t, "Invalid Numerical Constant"); validLexical = false; }
        | t = <INVALID_REAL_NUMERICAL_CONSTANT> { concatError(t, "Invalid Real Constant"); validLexical = false; }
        | t = <ASCII> { concatError(t, "Unidentified Token"); validLexical = false;  }
    } catch (ParseException e){
    }
}

