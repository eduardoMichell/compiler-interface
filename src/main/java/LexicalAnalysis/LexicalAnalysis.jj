options {
    STATIC = false;
}

PARSER_BEGIN(LexicalAnalysis)
import java.io.*;

public class LexicalAnalysis {

        private String result = "";
        private boolean validLexical = true;

        public String getResult(){
            return result;
        }

        public void setResult(String result){
            this.result = result;
        }
        public boolean isValidLexical(){
            return validLexical;
        }

        private void concatError(Token t){
            this.setResult(this.getResult() + "## Lexic error, invalid token ("+t.image+") located at [line:"+t.beginLine+"| column:"+t.beginColumn+"] ##\n");
        }

        public static void main(String[] args) throws ParseException, IOException {
                  try {
                      LexicalAnalysis parser = new LexicalAnalysis(
                         new BufferedReader(new FileReader(args[0]))
                      );
                      parser.MainRule();
                  } catch (FileNotFoundException e) {
                  } catch (ParseException e) {
                  }
        }

}
PARSER_END(LexicalAnalysis)

SKIP: { " " | "\t" | "\n" | "\r" }

SKIP : {
  "/*" : multilinecomment
}

SKIP : {
  "//" : singlelinecomment
}

<multilinecomment> SKIP: {
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP: {
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


TOKEN : {
    <SPECIAL_SYMBOLS : "=" | ">" | "<" | "_" |  "{" | "}" | "(" | ")"
    | "[" |  "]"| "," | "." | "+" | "-" | "*" | "/" | "%"
    | "|" | "&" | "!">
}

TOKEN : {
      <RESERVED_WORD : "designate" | "declaration" | "description" | "true"| "untrue"
      | "avaliate" | "integer" | "result" | "constant" | "variable" | "repeat" | "write" |
      "read" | "enum" | "logic" | "string" | "real" | "type" | "body" | "this" | "all" |
      "and" | "as" | "is" | "do">
}

TOKEN : {
   <IDENTIFIER : (<CAPITAL_LETTER>)+ (<SYMBOL>)?(
       (<LETTER>)* |
       <LETTER> <SYMBOL> |
       <DIGIT> <DIGIT> <LETTER> |
       <DIGIT> <DIGIT> <SYMBOL> |
       <DIGIT> <LETTER> |
       <DIGIT> <SYMBOL> |
       <DIGIT> <SYMBOL> <LETTER> |
       <DIGIT> <DIGIT> <SYMBOL> <LETTER> |
       <DIGIT> (<LETTER>)+ <SYMBOL> |
       <DIGIT> <DIGIT> (<LETTER>)+ <SYMBOL>
   )*>
}

TOKEN : {
      <LITERAL_CONSTANT  : <SINGLE_QUOTE> (<ASCII>)* <SINGLE_QUOTE> |<DOUBLE_QUOTE> (<ASCII>)* <DOUBLE_QUOTE>>
}

TOKEN : {
      <INTEGER_NUMERICAL_CONSTANT : <DIGIT> (<DIGIT>)? (<DIGIT>)?>
    | <REAL_NUMERICAL_CONSTANT : <DIGIT> (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? (<DIGIT>)? "." <DIGIT>(<DIGIT>)? (<DIGIT>)?>
}


TOKEN : {
    <DIGIT: ["0"-"9"]>
  | <SYMBOL: ["_"]>
  | <MINUS: ("-"){1}>
  | <SINGLE_QUOTE: "'">
  | <DOUBLE_QUOTE: "\"">
  | <LETTER: ["A"-"Z","a"-"z"]>
  | <SMALL_LETTER : ["a"-"z"]>
  | <CAPITAL_LETTER : ["A"-"Z"]>
  | <ASCII: (~[])>
}

void MainRule():{}{
     (lexicalAnalyzer())*
     <EOF>
}


void lexicalAnalyzer() : {
    Token t;
}
{
     t = <RESERVED_WORD> { System.out.println("Reserved Word: " + t.image); }
   | t = <SPECIAL_SYMBOLS> { System.out.println("Special Symbol: " + t.image); }
   | t = <IDENTIFIER> { System.out.println("Identifier: " + t.image); }
   | t = <INTEGER_NUMERICAL_CONSTANT> { System.out.println("Integer Constant: " + t.image); }
   | t = <REAL_NUMERICAL_CONSTANT> { System.out.println("Real Constant: " + t.image); }
   | t = <LITERAL_CONSTANT> { System.out.println("Literal Constant: " + t.image); }
}

